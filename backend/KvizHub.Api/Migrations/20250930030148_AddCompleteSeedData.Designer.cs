// <auto-generated />
using System;
using KvizHub.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KvizHub.Api.Migrations
{
    [DbContext(typeof(KvizHubContext))]
    [Migration("20250930030148_AddCompleteSeedData")]
    partial class AddCompleteSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KvizHub.Api.Models.AnswerOption", b =>
                {
                    b.Property<int>("AnswerOptionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnswerOptionID"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionID")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AnswerOptionID");

                    b.HasIndex("QuestionID");

                    b.ToTable("AnswerOptions");

                    b.HasData(
                        new
                        {
                            AnswerOptionID = 189,
                            IsCorrect = true,
                            QuestionID = 73,
                            Text = "Tačno"
                        },
                        new
                        {
                            AnswerOptionID = 190,
                            IsCorrect = false,
                            QuestionID = 73,
                            Text = "Netačno"
                        },
                        new
                        {
                            AnswerOptionID = 191,
                            IsCorrect = true,
                            QuestionID = 74,
                            Text = "Mars"
                        },
                        new
                        {
                            AnswerOptionID = 192,
                            IsCorrect = false,
                            QuestionID = 74,
                            Text = "Venera"
                        },
                        new
                        {
                            AnswerOptionID = 193,
                            IsCorrect = false,
                            QuestionID = 74,
                            Text = "Jupiter"
                        },
                        new
                        {
                            AnswerOptionID = 194,
                            IsCorrect = true,
                            QuestionID = 75,
                            Text = "Kit"
                        },
                        new
                        {
                            AnswerOptionID = 195,
                            IsCorrect = true,
                            QuestionID = 75,
                            Text = "Slepi miš"
                        },
                        new
                        {
                            AnswerOptionID = 196,
                            IsCorrect = false,
                            QuestionID = 75,
                            Text = "Ajkula"
                        },
                        new
                        {
                            AnswerOptionID = 197,
                            IsCorrect = false,
                            QuestionID = 77,
                            Text = "Jedno"
                        },
                        new
                        {
                            AnswerOptionID = 198,
                            IsCorrect = false,
                            QuestionID = 77,
                            Text = "Dva"
                        },
                        new
                        {
                            AnswerOptionID = 199,
                            IsCorrect = true,
                            QuestionID = 77,
                            Text = "Tri"
                        },
                        new
                        {
                            AnswerOptionID = 200,
                            IsCorrect = false,
                            QuestionID = 78,
                            Text = "Tačno"
                        },
                        new
                        {
                            AnswerOptionID = 201,
                            IsCorrect = true,
                            QuestionID = 78,
                            Text = "Netačno"
                        },
                        new
                        {
                            AnswerOptionID = 202,
                            IsCorrect = false,
                            QuestionID = 79,
                            Text = "Amazon"
                        },
                        new
                        {
                            AnswerOptionID = 203,
                            IsCorrect = true,
                            QuestionID = 79,
                            Text = "Nil"
                        },
                        new
                        {
                            AnswerOptionID = 212,
                            IsCorrect = false,
                            QuestionID = 83,
                            Text = "Grčka"
                        },
                        new
                        {
                            AnswerOptionID = 210,
                            IsCorrect = true,
                            QuestionID = 85,
                            Text = "Tačno"
                        },
                        new
                        {
                            AnswerOptionID = 211,
                            IsCorrect = false,
                            QuestionID = 85,
                            Text = "Netačno"
                        });
                });

            modelBuilder.Entity("KvizHub.Api.Models.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("KvizHub.Api.Models.GameRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CurrentQuestionIndex")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CurrentQuestionStartTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FinishedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("HostDisconnectedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("HostUsername")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<string>("RoomCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.ToTable("GameRooms");
                });

            modelBuilder.Entity("KvizHub.Api.Models.LiveQuizParticipant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DisconnectedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("GameRoomId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameRoomId");

                    b.HasIndex("UserId");

                    b.ToTable("LiveQuizParticipants");
                });

            modelBuilder.Entity("KvizHub.Api.Models.ParticipantAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnswerTimeMilliseconds")
                        .HasColumnType("int");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("ParticipantId")
                        .HasColumnType("int");

                    b.Property<int>("PointsAwarded")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("SubmittedAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("QuestionId");

                    b.ToTable("ParticipantAnswers");
                });

            modelBuilder.Entity("KvizHub.Api.Models.ParticipantSelectedOption", b =>
                {
                    b.Property<int>("ParticipantAnswerId")
                        .HasColumnType("int");

                    b.Property<int>("AnswerOptionId")
                        .HasColumnType("int");

                    b.HasKey("ParticipantAnswerId", "AnswerOptionId");

                    b.HasIndex("AnswerOptionId");

                    b.ToTable("ParticipantSelectedOptions");
                });

            modelBuilder.Entity("KvizHub.Api.Models.Question", b =>
                {
                    b.Property<int>("QuestionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionID"));

                    b.Property<string>("CorrectTextAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<double>("PointNum")
                        .HasColumnType("float");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuizID")
                        .HasColumnType("int");

                    b.Property<int?>("TimeLimitSeconds")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("QuestionID");

                    b.HasIndex("QuizID");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            QuestionID = 73,
                            CorrectTextAnswer = "",
                            IsArchived = false,
                            PointNum = 100.0,
                            QuestionText = "Da li je Pariz glavni grad Francuske?",
                            QuizID = 16,
                            TimeLimitSeconds = 10,
                            Type = 2
                        },
                        new
                        {
                            QuestionID = 74,
                            CorrectTextAnswer = "",
                            IsArchived = false,
                            PointNum = 150.0,
                            QuestionText = "Koja planeta je poznata kao Crvena planeta?",
                            QuizID = 16,
                            TimeLimitSeconds = 15,
                            Type = 0
                        },
                        new
                        {
                            QuestionID = 75,
                            CorrectTextAnswer = "",
                            IsArchived = false,
                            PointNum = 200.0,
                            QuestionText = "Koje od navedenih životinja su sisari?",
                            QuizID = 16,
                            TimeLimitSeconds = 20,
                            Type = 1
                        },
                        new
                        {
                            QuestionID = 76,
                            CorrectTextAnswer = "Tokio",
                            IsArchived = false,
                            PointNum = 100.0,
                            QuestionText = "Glavni grad Japana je ____.",
                            QuizID = 16,
                            TimeLimitSeconds = 15,
                            Type = 3
                        },
                        new
                        {
                            QuestionID = 77,
                            CorrectTextAnswer = "",
                            IsArchived = false,
                            PointNum = 150.0,
                            QuestionText = "Koliko srca ima oktopod?",
                            QuizID = 16,
                            TimeLimitSeconds = 20,
                            Type = 0
                        },
                        new
                        {
                            QuestionID = 78,
                            CorrectTextAnswer = "",
                            IsArchived = false,
                            PointNum = 100.0,
                            QuestionText = "Da li Sunce izlazi na zapadu?",
                            QuizID = 16,
                            TimeLimitSeconds = 10,
                            Type = 2
                        },
                        new
                        {
                            QuestionID = 79,
                            CorrectTextAnswer = "",
                            IsArchived = false,
                            PointNum = 200.0,
                            QuestionText = "Koja je najduža reka na svetu?",
                            QuizID = 17,
                            TimeLimitSeconds = 20,
                            Type = 0
                        },
                        new
                        {
                            QuestionID = 80,
                            CorrectTextAnswer = "Everest",
                            IsArchived = false,
                            PointNum = 150.0,
                            QuestionText = "Najviši planinski vrh na svetu je Mont ____.",
                            QuizID = 17,
                            TimeLimitSeconds = 15,
                            Type = 3
                        },
                        new
                        {
                            QuestionID = 81,
                            CorrectTextAnswer = "",
                            IsArchived = false,
                            PointNum = 150.0,
                            QuestionText = "Da li se Australija nalazi na južnoj hemisferi?",
                            QuizID = 17,
                            TimeLimitSeconds = 10,
                            Type = 2
                        },
                        new
                        {
                            QuestionID = 82,
                            CorrectTextAnswer = "",
                            IsArchived = false,
                            PointNum = 250.0,
                            QuestionText = "Koje od navedenih država se nalaze u Južnoj Americi?",
                            QuizID = 17,
                            TimeLimitSeconds = 25,
                            Type = 1
                        },
                        new
                        {
                            QuestionID = 83,
                            CorrectTextAnswer = "",
                            IsArchived = false,
                            PointNum = 200.0,
                            QuestionText = "U kojoj državi se nalazi drevni grad Petra?",
                            QuizID = 17,
                            TimeLimitSeconds = 20,
                            Type = 0
                        },
                        new
                        {
                            QuestionID = 84,
                            CorrectTextAnswer = "Afrika",
                            IsArchived = false,
                            PointNum = 150.0,
                            QuestionText = "Pustinja Sahara se nalazi na kontinentu ____.",
                            QuizID = 17,
                            TimeLimitSeconds = 15,
                            Type = 3
                        },
                        new
                        {
                            QuestionID = 85,
                            CorrectTextAnswer = "",
                            IsArchived = false,
                            PointNum = 200.0,
                            QuestionText = "Da li je C# statički tipiziran jezik?",
                            QuizID = 18,
                            TimeLimitSeconds = 15,
                            Type = 2
                        },
                        new
                        {
                            QuestionID = 86,
                            CorrectTextAnswer = "useState",
                            IsArchived = false,
                            PointNum = 250.0,
                            QuestionText = "U React-u, hook za upravljanje stanjem u funkcijskim komponentama je ____State.",
                            QuizID = 18,
                            TimeLimitSeconds = 20,
                            Type = 3
                        },
                        new
                        {
                            QuestionID = 87,
                            CorrectTextAnswer = "",
                            IsArchived = false,
                            PointNum = 300.0,
                            QuestionText = "Šta znači 'DRY' princip u programiranju?",
                            QuizID = 18,
                            TimeLimitSeconds = 20,
                            Type = 0
                        },
                        new
                        {
                            QuestionID = 88,
                            CorrectTextAnswer = "",
                            IsArchived = false,
                            PointNum = 350.0,
                            QuestionText = "Koje od navedenih su validne HTTP metode?",
                            QuizID = 18,
                            TimeLimitSeconds = 25,
                            Type = 1
                        },
                        new
                        {
                            QuestionID = 89,
                            CorrectTextAnswer = "",
                            IsArchived = false,
                            PointNum = 300.0,
                            QuestionText = "Koji upit će EF Core prevesti u SQL bez praćenja promena?",
                            QuizID = 18,
                            TimeLimitSeconds = 25,
                            Type = 0
                        },
                        new
                        {
                            QuestionID = 90,
                            CorrectTextAnswer = "TABLE",
                            IsArchived = false,
                            PointNum = 250.0,
                            QuestionText = "SQL komanda za brisanje cele tabele iz baze je DROP ____.",
                            QuizID = 18,
                            TimeLimitSeconds = 20,
                            Type = 3
                        });
                });

            modelBuilder.Entity("KvizHub.Api.Models.Quiz", b =>
                {
                    b.Property<int>("QuizID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuizID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int>("Mode")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TimeLimit")
                        .HasColumnType("int");

                    b.HasKey("QuizID");

                    b.ToTable("Quizzes");

                    b.HasData(
                        new
                        {
                            QuizID = 16,
                            Description = "Lagani kviz opšte kulture za zagrevanje.",
                            Difficulty = 0,
                            IsArchived = false,
                            Mode = 1,
                            Name = "Brzi Izazov Znanja",
                            TimeLimit = 0
                        },
                        new
                        {
                            QuizID = 17,
                            Description = "Proveri svoje znanje iz geografije u ovom kvizu srednje težine.",
                            Difficulty = 1,
                            IsArchived = false,
                            Mode = 1,
                            Name = "Put oko sveta",
                            TimeLimit = 0
                        },
                        new
                        {
                            QuizID = 18,
                            Description = "Težak kviz za sve programere. Dokaži svoje znanje!",
                            Difficulty = 2,
                            IsArchived = false,
                            Mode = 1,
                            Name = "Developerski Duel",
                            TimeLimit = 0
                        });
                });

            modelBuilder.Entity("KvizHub.Api.Models.QuizCategory", b =>
                {
                    b.Property<int>("QuizID")
                        .HasColumnType("int");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.HasKey("QuizID", "CategoryID");

                    b.HasIndex("CategoryID");

                    b.ToTable("QuizCategories");

                    b.HasData(
                        new
                        {
                            QuizID = 16,
                            CategoryID = 13
                        },
                        new
                        {
                            QuizID = 17,
                            CategoryID = 8
                        },
                        new
                        {
                            QuizID = 18,
                            CategoryID = 1
                        });
                });

            modelBuilder.Entity("KvizHub.Api.Models.QuizResult", b =>
                {
                    b.Property<int>("QuizResultID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuizResultID"));

                    b.Property<int>("AttemptNum")
                        .HasColumnType("int");

                    b.Property<int>("CompletionTime")
                        .HasColumnType("int");

                    b.Property<int>("CorrectAnswers")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfCompletion")
                        .HasColumnType("datetime2");

                    b.Property<int>("Mode")
                        .HasColumnType("int");

                    b.Property<int>("QuizID")
                        .HasColumnType("int");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("QuizResultID");

                    b.HasIndex("QuizID");

                    b.HasIndex("UserID");

                    b.ToTable("QuizResults");
                });

            modelBuilder.Entity("KvizHub.Api.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserRole")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("KvizHub.Api.Models.UserAnswer", b =>
                {
                    b.Property<int>("UserAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserAnswerId"));

                    b.Property<string>("GivenTextAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionID")
                        .HasColumnType("int");

                    b.Property<int>("QuizResultID")
                        .HasColumnType("int");

                    b.HasKey("UserAnswerId");

                    b.HasIndex("QuestionID");

                    b.HasIndex("QuizResultID");

                    b.ToTable("UserAnswers");
                });

            modelBuilder.Entity("KvizHub.Api.Models.UserAnswerSelectedOption", b =>
                {
                    b.Property<int>("UserAnswerId")
                        .HasColumnType("int");

                    b.Property<int>("AnswerOptionId")
                        .HasColumnType("int");

                    b.HasKey("UserAnswerId", "AnswerOptionId");

                    b.HasIndex("AnswerOptionId");

                    b.ToTable("UserAnswerSelectedOptions");
                });

            modelBuilder.Entity("KvizHub.Api.Models.AnswerOption", b =>
                {
                    b.HasOne("KvizHub.Api.Models.Question", "Question")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("KvizHub.Api.Models.GameRoom", b =>
                {
                    b.HasOne("KvizHub.Api.Models.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("KvizHub.Api.Models.LiveQuizParticipant", b =>
                {
                    b.HasOne("KvizHub.Api.Models.GameRoom", "GameRoom")
                        .WithMany("Participants")
                        .HasForeignKey("GameRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KvizHub.Api.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameRoom");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KvizHub.Api.Models.ParticipantAnswer", b =>
                {
                    b.HasOne("KvizHub.Api.Models.LiveQuizParticipant", "Participant")
                        .WithMany("Answers")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KvizHub.Api.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participant");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("KvizHub.Api.Models.ParticipantSelectedOption", b =>
                {
                    b.HasOne("KvizHub.Api.Models.AnswerOption", "AnswerOption")
                        .WithMany()
                        .HasForeignKey("AnswerOptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KvizHub.Api.Models.ParticipantAnswer", "ParticipantAnswer")
                        .WithMany("SelectedOptions")
                        .HasForeignKey("ParticipantAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnswerOption");

                    b.Navigation("ParticipantAnswer");
                });

            modelBuilder.Entity("KvizHub.Api.Models.Question", b =>
                {
                    b.HasOne("KvizHub.Api.Models.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("KvizHub.Api.Models.QuizCategory", b =>
                {
                    b.HasOne("KvizHub.Api.Models.Category", "Category")
                        .WithMany("QuizCategories")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KvizHub.Api.Models.Quiz", "Quiz")
                        .WithMany("QuizCategories")
                        .HasForeignKey("QuizID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("KvizHub.Api.Models.QuizResult", b =>
                {
                    b.HasOne("KvizHub.Api.Models.Quiz", "Quiz")
                        .WithMany("QuizResults")
                        .HasForeignKey("QuizID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KvizHub.Api.Models.User", "User")
                        .WithMany("QuizResults")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KvizHub.Api.Models.UserAnswer", b =>
                {
                    b.HasOne("KvizHub.Api.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KvizHub.Api.Models.QuizResult", "QuizResult")
                        .WithMany("UserAnswers")
                        .HasForeignKey("QuizResultID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("QuizResult");
                });

            modelBuilder.Entity("KvizHub.Api.Models.UserAnswerSelectedOption", b =>
                {
                    b.HasOne("KvizHub.Api.Models.AnswerOption", "AnswerOption")
                        .WithMany()
                        .HasForeignKey("AnswerOptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KvizHub.Api.Models.UserAnswer", "UserAnswer")
                        .WithMany("SelectedOptions")
                        .HasForeignKey("UserAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnswerOption");

                    b.Navigation("UserAnswer");
                });

            modelBuilder.Entity("KvizHub.Api.Models.Category", b =>
                {
                    b.Navigation("QuizCategories");
                });

            modelBuilder.Entity("KvizHub.Api.Models.GameRoom", b =>
                {
                    b.Navigation("Participants");
                });

            modelBuilder.Entity("KvizHub.Api.Models.LiveQuizParticipant", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("KvizHub.Api.Models.ParticipantAnswer", b =>
                {
                    b.Navigation("SelectedOptions");
                });

            modelBuilder.Entity("KvizHub.Api.Models.Question", b =>
                {
                    b.Navigation("AnswerOptions");
                });

            modelBuilder.Entity("KvizHub.Api.Models.Quiz", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("QuizCategories");

                    b.Navigation("QuizResults");
                });

            modelBuilder.Entity("KvizHub.Api.Models.QuizResult", b =>
                {
                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("KvizHub.Api.Models.User", b =>
                {
                    b.Navigation("QuizResults");
                });

            modelBuilder.Entity("KvizHub.Api.Models.UserAnswer", b =>
                {
                    b.Navigation("SelectedOptions");
                });
#pragma warning restore 612, 618
        }
    }
}
